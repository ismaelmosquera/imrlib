/*
 * Copyright (c) 2023 Ismael Mosquera Rivera
 *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

/*
* RawDataPlayer.java
*
* imr-lib
*
* Author: Ismael Mosquera Rivera
*/

package imr.media.audio;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.LineUnavailableException;

/**
* The class <code>RawDataPlayer</code> implements an audio player which can be useful to play raw audio data.
* For example, data generated by an <code>Oscillator</code> object.
* The steps are:
* <ul>
* <li>Instantiate a <code>RawDataPlayer</code> object.</li>
* <li>call the start method first.</li>
* <li>call the play method passing a byte array with the data to play as parameter</li>
* <li>when all the data is played, call the stop method. </li>
* </ul>
* Do not worry about closing the device, since the <code>SourceDataLine</code> class implements the autoclosable interface.
* Example:
* <code>
* RawDataPlayer player = new RawDataPlayer();
* player.start();
* // read a data frame from an oscillator object.
* player.play(data);
* player.stop();
* </code>
* This class uses assertions. so, you have to start your application with the '-ea' modifier
* which enables assertions.
*
* @see SourceDataLine, Oscillator, RawDataStorage.
*
* @author Ismael Mosquera Rivera.
*/
public class RawDataPlayer
{
/**
* Constructor.
* Makes a new instance of a <code>RawDataPlayer</code> object.
* This constructor calls the other one passing a 44100 value as parameter.
* So, we can say that the default value for sample rate equals 44100.
*
*/
public RawDataPlayer()
{
this(44100.0f);
}

/**
* Constructor.
* Makes a new instance of a <code>RawDataPlayer</code> object.
* @param sr Sample Rate value; allowed values: 11025, 22050 and 44100.
*
*/
public RawDataPlayer(float sr)
{
boolean condition = ((int)sr == 11025 || (int)sr == 22050 || (int)sr == 44100);
assert condition: "bad value for sample rate; allowed values: 11025, 22050 and 44100";
AudioFormat format = new AudioFormat(
	AudioFormat.Encoding.PCM_SIGNED,
		sr,
		BITS_PER_SAMPLE,
		NUM_CHANNELS,
		NUM_CHANNELS * 2,
		sr,
		false);
		int bufferSize = (int)sr * 40;
try
{
_line = AudioSystem.getSourceDataLine(format);
_line.open(format, bufferSize);
}
catch(LineUnavailableException e)
{
	System.out.println(e);
}

}

/**
* Stars the player.
* You must call this method first.
*
*/
public void start()
{
_line.flush();
_line.start();
}

/**
* Playys the audio data frame passed as parameter.
* @param data Byte array data frame.
*
* @return Number of bytes played.
*
*/
public int play(byte[] data)
{
return _line.write(data, 0, data.length);
}

/**
* Stops the player.
*
*/
public void stop()
{
if(_line.isActive()) _line.stop();
}

/**
* Gets the <code>AudioFormat</code> object associated with this player.
*
* @return The <code>AudioFormat</code> of this player.
*/
public AudioFormat getFormat()
{
return _line.getFormat();
}


private SourceDataLine _line;

private static final int BITS_PER_SAMPLE = 16;
private static final int NUM_CHANNELS = 2;
}

// END
