/*
 * Copyright (c) 2024 Ismael Mosquera Rivera
 *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

/*
* Port.java
*
* imr-lib
*
* Author: Ismael Mosquera Rivera
*
*/

package imr.util;

/**
* The <code>Port</code> class implements a port useful to implement the producer/consumer sinchronized algorithm.
* <p>
* This is a parametric class which can be instantiated to work with any kind of object.
* <p>
* This class is thread safe.
*
* @author Ismael Mosquera Rivera
*
*/
public final class Port<T>
{

/**
* Producer method.
* <p>
* @param item some kind of object.
* <p>
* Take in account that arrays of primitive ( atomic ) types are also consider objects in the Java Programming Language.
*
*/
public synchronized void produce(T item)
{
while(!empty)
{
try
{
wait();
}
catch(InterruptedException e){}
}
empty = false;
this.item = item;
notifyAll();
}

/**
* Consumer method.
* <p>
* Consumes data generated by the produce method.
*
* @return consumed generic data.
*
*/
public synchronized T consume()
{
while(empty)
{
try
{
wait();
}
catch(InterruptedException e){}
}
empty = true;
notifyAll();
return item;
}

private volatile boolean empty = true;
private T item;
}

// END
