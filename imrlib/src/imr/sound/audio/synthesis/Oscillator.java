/*
 * Copyright (c) 2023 Ismael Mosquera Rivera
 *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

/*
* Oscillator.java
*
* imr-lib
*
* Author: Ismael Mosquera Rivera
*/

package imr.sound.audio.synthesis;

import imr.util.iArray;

/**
* The class <code>Oscillator</code> is a sinusoidal signal generator.
* So, you can get pure sinusoides oscillating at different frequencies.
*
* This class uses assertions, so, you must run your application with the '-ea' modificator.
* which enables assertions.
*
* @author Ismael Mosquera Rivera
*/
public class Oscillator
{
/**
* Constructor.
* Makes a new instance object of class <code>Oscillator</code>.
* This constructor actually calls the constructor with parameters.
* Default values: amplitude = 0.8, frequency = 440 Hz, sample rate = 44100.
*
*/
public Oscillator()
{
this(0.8f, 440.0f, 44100.0f);
}

/**
* Constructor.
* Makes a new instance object of the class <code>Oscillator</code>.
* @param amp Amplitude of the signal ( must be in the range [0..1] ).
* @param freq Frequency in Hz ( must be greater than zero ).
* @param sampleRate Allowed values: 11025, 22050 and 44100.
*
*/
public Oscillator(float amp, float freq, float sampleRate)
{
	boolean condition = ((int)sampleRate == 11025 || (int)sampleRate == 22050 || (int)sampleRate == 44100);
assert condition: "bad value for sample rate; allowed values: 11025, 22050 and 44100";
_sampleRate = sampleRate;
_phase = 0.0f;
_m = null;
setAmplitude(amp);
setFrequency(freq);
}

/**
* Gets the current amplitude value from an <code>Oscillator</code> object.
*
* @return amplitude value.
*/
public float getAmplitude()
{
return _amplitude;
}

/**
* Gets the current frequency value from an <code>Oscillator</code> object.
*
* @return frequency value.
*/
public float getFrequency()
{
return _frequency;
}

/**
* Gets the sample rate value from an <code>Oscillator</code> object.
*
* @return sample rate value.
*/
public float getSampleRate()
{
return _sampleRate;
}

/**
* Reads a data frame generated by an <code>Oscillator</code> object.
* @param frame A byte array to fill.
*
* @return the number of bytes generated ( normally, the size of the data byte array passed as parameter ).
*/
public int read(byte[] frame)
{
	boolean flag = false;
int n = frame.length;
if(_m == null)
{
	_m = new float[n];
	for(int i = 0; i < _m.length; i++) _m[i] = 0.0f;
	flag = true;
}
for(int i = 0; i < n; i++)
{
frame[i] = (byte)(_amplitude * (float)Math.cos((double)_phase+_m[i]) * 127.0f);
_phase += _dphase;
if(_phase > 2.0f * Math.PI) _phase -= 2.0f * Math.PI;
}
if(flag) _m = null;
return n;
}

/**
* Sets the amplitude value for a <code>Oscillator</code> object.
* @param amp Amplitude value ( must be in the range [0..1] ).
*
*/
public void setAmplitude(float amp)
{
	assert (amp >= 0.0f && amp <= 1.0f): "bad amplitude; allowed values: ( 0.0f .. 1.0f ).";
_amplitude = amp;
}

/**
* Sets the frequency value in Hz for a <code>Oscillator</code> object.
* @param freq Frequency value ( must be greater than zero ).
*
*/
public void setFrequency(float freq)
{
	assert (freq > 0.0f): "bad value for frequency; it must be greater than zero.";
_frequency = freq;
updateDeltaPhase();
}

/**
* Sets the sample rate value for a <code>Oscillator</code> object.
* @param sr Sample rate value ( allowed values: 11025, 22050 and 44100 ).
*
*/
public void setSampleRate(float sr)
{
boolean condition = ((int)sr == 11025 || (int)sr == 22050 || (int)sr == 44100);
assert condition: "bad value for sample rate; allowed values: 11025, 22050 and 44100";
_sampleRate = sr;
updateDeltaPhase();
}

/**
* Sets a signal to perform fm synthesis.
* That is, the data frame passed as parameter modulates in frequency the generated sinusoid.
* @param m The modulator signal.
*
* @see imr.sound.audio.synthesis.FrequencyModulator
*
*/
public void setModulator(float[] m)
{
if(m == null)
{
	_m = null;
}
else
{
	_m = (float[])iArray.clone(m);
}
}


private void updateDeltaPhase()
{
_dphase = 2.0f * (float)Math.PI * _frequency / _sampleRate;
}

private float _amplitude;
private float _frequency;
private float _sampleRate;
private float _phase;
private float _dphase;

private float[] _m;  // modulator signal
}

// END
